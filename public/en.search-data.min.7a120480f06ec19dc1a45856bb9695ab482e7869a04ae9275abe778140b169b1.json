[{"id":0,"href":"/docs/ch1/boards_intro/","title":"1. 開發板介紹","section":"一、基本入門","content":" 1.開發板介紹 # "},{"id":1,"href":"/docs/ch2/led/","title":"LED","section":"二、使用傳感器","content":" LED # 點亮 LED # 1import machine 2pin = machine.Pin(18, machine.Pin.OUT) 3pin.value(1) 閃爍 LED # 1import time 2import machine 3 4pin = machine.Pin(18, machine.Pin.OUT) 5while True: 6\tpin.value(1) 7\ttime.sleep(0.5) 8\tpin.value(0) 9\ttime.sleep(0.5) 呼吸燈 # 1from machine import Pin, PWM 2import time 3 4DUTY_MAX = 2**16 - 1 5 6duty_u16 = 0 7delta_d = 16*4 8 9p = PWM(Pin(5), 1000, duty_u16=duty_u16) 10print(p) 11 12time.sleep(1.5) 13 14while True: 15 p.duty_u16(duty_u16) 16 time.sleep(0.001) 17 duty_u16 += delta_d 18 if duty_u16 \u0026gt;= DUTY_MAX: 19 duty_u16 = DUTY_MAX 20 delta_d = -delta_d 21 elif duty_u16 \u0026lt;= 0: 22 duty_u16 = 0 23 delta_d = -delta_d 24``` "},{"id":2,"href":"/docs/ch1/","title":"一、基本入門","section":"Docs","content":" 一、基本入門 # 開發板介紹 使用開發板物件 使用傳感器 Grove Dongle "},{"id":3,"href":"/docs/ch1/boards_use/","title":"2. 使用開發板物件","section":"一、基本入門","content":" 2.使用開發板物件 # Webduino 程式庫提供了 Board 類別，該類別包含了 WiFi 、 MQTT、存取參數檔等功能。 並內建WebServer提供設定 wifi等資訊、線上程式更新等。 此外斷線會自動重新連線，包辦所有繁瑣又基礎的功能。\nboard 物件內建功能如下\n讀取參數檔(value.js)，連上指定 WiFi，斷線自動重連 連到 mqtt Server，可進行 pub/sub 訊息，斷線自動重連 內建 WebServer，可透過瀏覽器連接開發板設定 WiFi帳密等資訊 開發板內建訂閱命令集，可遠端進行 確認開發板狀態 讓開發板重新開機 讓開發板下載指定程式檔案 開發板物件使用範例 # 1from webduino.board import Board 2import machine, time 3 4try: 5 time.sleep(1.5) 6 board = Board(devId=\u0026#39;new\u0026#39;) 7 board.start(checkTime=0.5) 8 9 # mqtt sub 10 def runCode(msg): 11 exec(msg) 12 13 board.onTopic(\u0026#39;app\u0026#39;,runCode) 14 15except Exception as e: 16 print(e) 17 machine.reset() 接收所有開發板傳來的訊息 # 開發板訂閱 Topic # 建立開發板物件，並連上 WiFi、MQTT，接收MQTT傳來訊息 # devId 如果不輸入，會讀取根目錄下 value.js :::info value.js 裡面存放 wifi 帳號密碼，開發板 deviceId , ssid 等資訊 ::: 1import machine, time 2from webduino.board import Board 3from machine import Timer 4 5try: 6 time.sleep(1.5) 7 board = Board(devId=\u0026#39;esp01\u0026#39;) 8 chk = Timer(-1) 9 chk.init(period=500, mode=Timer.PERIODIC, callback=lambda t:board.check()) 10 11except Exception as e: 12 print(e) 13 machine.reset()\n訂閱指定 mqtt 寫法 # 1def runCode(msg): 2 exec(msg) 3 4board.onTopic(\u0026#39;app\u0026#39;,runCode) "},{"id":4,"href":"/docs/ch2/rgbled/","title":"RGB LED","section":"二、使用傳感器","content":" RGBLED # 1from machine import Pin 2import time 3 4p0 = Pin(0, Pin.OUT) 5for i in range(10): 6 time.sleep(0.25) 7 p0.value(i%2) "},{"id":5,"href":"/docs/ch2/","title":"二、使用傳感器","section":"Docs","content":" tags: micropython \u0026gt; [回首頁] # 使用傳感器範例 # 按下紅色小怪獸，OLED會顯示 Hello # 積木程式連結 # boot.py： 建立 WiFi , MQTT 連線，並確保斷線自動重新連線 main.py： 使用者自行撰寫的程式碼，可能是控制一個或多個傳感器，並且接收mqtt訊息 boot.py # 1##################### 2try: 3 import cmd 4 print(\u0026#34;import cmd....\u0026#34;) 5 machine.reset() 6except: 7 pass 8##################### 9 10import machine, time 11from webduino.board import Board 12from machine import Timer 13 14try: 15 time.sleep(1.5) 16 board = Board(devId=\u0026#39;wa01\u0026#39;) 17 chk = Timer(-1) 18 chk.init(period=500, mode=Timer.PERIODIC, callback=lambda t:board.check()) 19 20except Exception as e: 21 print(e) 22 machine.reset() main.py 使用 OLED # 1import ssd1306 2from machine import Pin,I2C 3 4gnd = Pin(15,Pin.OUT) 5gnd.value(0) 6 7i2c = I2C(scl=Pin(13), sda=Pin(12), freq=100000) #Init i2c 8lcd=ssd1306.SSD1306_I2C(128,64,i2c) #create LCD object,Specify col and row 9lcd.text(\u0026#34;ESP8266\u0026#34;,0,0) 10lcd.show() 11 12def runCode(msg): 13 exec(msg) 14 15board.onTopic(\u0026#39;app\u0026#39;,runCode) 16print(\u0026#34;gogogo...\u0026#34;) "},{"id":6,"href":"/docs/ch1/grove/","title":"3. Grove dongle","section":"一、基本入門","content":" 3.Grove dongle # Grove dongle # Grove Pin 接法 # 一隻訊號腳 # IO0 單Pin 訊號腳\n兩隻訊號腳 # IO0 (黃色線) \u0026lt;\u0026ndash;\u0026gt; CLK IO2 (白色線) \u0026lt;\u0026ndash;\u0026gt; DIO\nI2C # IO0 (黃色線) \u0026lt;\u0026ndash;\u0026gt; SCL IO2 (白色線) \u0026lt;\u0026ndash;\u0026gt; SDA\nScan I2C # 1from machine import I2C, Pin 2 3i2c = I2C(scl=Pin(0), sda=Pin(2), freq=100000) 4 5print(\u0026#39;Scan i2c bus...\u0026#39;) 6while True: 7 devices = i2c.scan() 8 if len(devices) == 0: 9 print(\u0026#34;No i2c device !\u0026#34;) 10 else: 11 print(\u0026#39;i2c devices found:\u0026#39;,len(devices)) 12 break; 13 14for device in devices: 15 print(\u0026#34;Decimal address: \u0026#34;,device,\u0026#34; | Hexa address: \u0026#34;,hex(device)) 傳感器使用範例 # OLED 0.96 (64x128) # 1from machine import Pin,I2C 2import ssd1306 3 4i2c = I2C(scl=Pin(0), sda=Pin(2), freq=100000) #Init i2c 5lcd=ssd1306.SSD1306_I2C(128,64,i2c) #create LCD object,Specify col and row 6lcd.text(\u0026#34;ESP8266\u0026#34;,0,0) 7lcd.text(\u0026#34;test\u0026#34;,0,16) 8lcd.text(\u0026#34;123456\u0026#34;,0,32) 9lcd.show()\nBuzzer # 1import machine , time 2 3def play(freq=300,delay=0.1): 4 pin25 = machine.PWM(machine.Pin(0), duty=512) 5 pin25.freq(freq) 6 time.sleep(delay) 7 machine.PWM(machine.Pin(0), duty=0) 8 9play(262,0.2) 10play(294,0.2) 11play(330,0.2)\nDHT11 # 1import dht , machine 2 3dht11 = dht.DHT11(machine.Pin(0)) 4dht11.measure() 5temp = dht11.temperature() # eg. 23 (°C) 6humi = dht11.humidity() 7print(\u0026#34;temp:%s , humi:%s\u0026#34;%(temp,humi))\nTM1637 # 1from TM1637 import TM1637 2from machine import Pin 3tm = TM1637(clk=Pin(2), dio=Pin(0)) 4tm.show(\u0026#39;1234\u0026#39;, True) # \u0026#39;:\u0026#39; True | False\nWS2812 # 1import machine, neopixel 2p = machine.Pin(0) 3n = neopixel.NeoPixel(p, 4) 4for i in range(4): 5 n[i] = (i * 20+10, i*2, 22) 6n.write() Rotary # 1import time 2from rotary_irq_esp import RotaryIRQ 3 4r = RotaryIRQ(pin_num_clk=0, 5 pin_num_dt=2, 6 min_val=0, 7 max_val=5, 8 reverse=False, 9 range_mode=RotaryIRQ.RANGE_WRAP) 10 11val_old = r.value() 12while True: 13 val_new = r.value() 14 15 if val_old != val_new: 16 val_old = val_new 17 print(\u0026#39;result =\u0026#39;, val_new) 18 19 time.sleep_ms(50) HC-SR04 # 1from hcsr04 import HCSR04 2from time import sleep 3 4sensor = HCSR04(trigger_pin=0, echo_pin=2, echo_timeout_us=10000) 5 6while True: 7 distance = sensor.distance_cm() 8 print(\u0026#39;Distance:\u0026#39;, distance, \u0026#39;cm\u0026#39;) 9 sleep(1)\n紅外線溫度感測 # 1import time 2import mlx90614 3from machine import I2C, Pin 4 5i2c = I2C(scl=Pin(0), sda=Pin(2)) 6sensor = mlx90614.MLX90614(i2c) 7 8while True: 9 print(sensor.read_ambient_temp(), sensor.read_object_temp()) 10 time.sleep_ms(500) HMC5883L (gy271) # (橙色) SCL \u0026ndash;\u0026gt; IO0 (黃色) SDA \u0026ndash;\u0026gt; IO2\n1from hmc5883l import HMC5883L 2 3sensor = HMC5883L(scl=0, sda=2) 4 5for i in range(1000): 6 x, y, z = sensor.read() 7 print(sensor.format_result(x, y, z)) ADXL345 三軸加速 # 1import time, adxl345 2from machine import Pin,I2C 3 4i2c = I2C(scl=Pin(0),sda=Pin(2), freq=10000) 5adx = adxl345.ADXL345(i2c) 6time.sleep(1.5) 7 8while True: 9 x=adx.xValue 10 y=adx.yValue 11 z=adx.zValue 12 #print(\u0026#39;The acceleration info of x, y, z are:%d,%d,%d\u0026#39;%(x,y,z)) 13 roll,pitch = adx.RP_calculate(x,y,z) 14 print(\u0026#39;roll=\u0026#39;,roll,\u0026#39;,pitch=\u0026#39;,pitch) 15 time.sleep_ms(50) MP3 播放器 # 控制命令\n1from dfplayermini import Player 2from time import sleep 3 4music = Player() 5music.volume(15) 6music.play(2) 7sleep(15) 8music.stop() 待測試補上範例 Code # 溫濕度 # ![](/uploads/upload_4278324ce63f23d01b7134cd46701552.png =30%x)\nAPDS-9930 # Servo # LCD1602 # 1# https://github.com/dhylands/python_lcd/blob/master/lcd/lcd_api.py 2from time import sleep_ms, ticks_ms 3from machine import I2C, Pin 4from i2c_lcd import I2cLcd 5 6# The PCF8574 has a jumper selectable address: 0x20 - 0x27 7DEFAULT_I2C_ADDR = 0x3F 8 9def test_main(): 10 \u0026#34;\u0026#34;\u0026#34;Test function for verifying basic functionality.\u0026#34;\u0026#34;\u0026#34; 11 print(\u0026#34;Running test_main\u0026#34;) 12 i2c = I2C(scl=Pin(5), sda=Pin(4), freq=100000) 13 lcd = I2cLcd(i2c, DEFAULT_I2C_ADDR, 2, 16) 14 lcd.putstr(\u0026#34;It Works!\\nSecond Line\u0026#34;) 15 sleep_ms(3000) 16 lcd.clear() 17 count = 0 18 while True: 19 lcd.move_to(0, 0) 20 lcd.putstr(\u0026#34;%7d\u0026#34; % (ticks_ms() // 1000)) 21 sleep_ms(1000) 22 count += 1 23 if count % 10 == 3: 24 print(\u0026#34;Turning backlight off\u0026#34;) 25 lcd.backlight_off() 26 if count % 10 == 4: 27 print(\u0026#34;Turning backlight on\u0026#34;) 28 lcd.backlight_on() 29 if count % 10 == 5: 30 print(\u0026#34;Turning display off\u0026#34;) 31 lcd.display_off() 32 if count % 10 == 6: 33 print(\u0026#34;Turning display on\u0026#34;) 34 lcd.display_on() 35 if count % 10 == 7: 36 print(\u0026#34;Turning display \u0026amp; backlight off\u0026#34;) 37 lcd.backlight_off() 38 lcd.display_off() 39 if count % 10 == 8: 40 print(\u0026#34;Turning display \u0026amp; backlight on\u0026#34;) 41 lcd.backlight_on() 42 lcd.display_on() 43 44#if __name__ == \u0026#34;__main__\u0026#34;: 45test_main() "},{"id":7,"href":"/docs/ch2/ws2812/","title":"ws2812","section":"二、使用傳感器","content":" 彩燈 WS2812B # ws2812b # 1import time 2import machine, neopixel 3from webduino.board import * 4 5np = neopixel.NeoPixel(machine.Pin(2), 25) 6 7def setLED(r,g,b): 8 for led in range(25): 9 np[led] = (r,g,b) 10 np.write() 11 12setLED(0,1,0) 13print(\u0026#39;done.\u0026#39;) 14``` "},{"id":8,"href":"/docs/ch3/","title":"三、十大應用精選","section":"Docs","content":" 十大應用精選 # 機房溫控與警訊 鈕扣按鈕 賭神骰子 小米燈泡 智農遠端拍照 生物觀察箱 自製萬用遙控器 點距陣繪圖小工具 ESPNow 燈號控制、Jupyter 串接 Line 太陽能供電 + LoRa + DeepSleep "},{"id":9,"href":"/docs/ch1/first_use/","title":"4. 第一次使用就上手","section":"一、基本入門","content":" tags: micropython \u0026gt; [回首頁] # 第一次使用就上手 # 待補充\n線上燒錄 安裝程式庫 建立 main.py 和網頁互動 Blockly Node-Red 網頁 萬用遙控器 main.py 啟動流程說明 # 檢查 cmd.py 是否存在，存在就執行，執行後刪檔重開 檢查參數檔案 value.js 是否存在，沒有就建立預設參數檔 建立開發板物件、讀取 value.js 開啟熱點 進行 WiFi 和 MQTT連線 1# 預設參數檔 2var data={ 3 \u0026#39;IP\u0026#39;: \u0026#39;xxx.xxx.xxx.xxx\u0026#39;, 4 \u0026#39;AP\u0026#39;: \u0026#39;webduino.io\u0026#39;, 5 \u0026#39;zone\u0026#39;: \u0026#39;global\u0026#39;, 6 \u0026#39;Ver\u0026#39;: \u0026#39;0.99b\u0026#39;, 7 \u0026#39;ssid1\u0026#39;: \u0026#39;KingKit_2.4G\u0026#39;, 8 \u0026#39;ssid2\u0026#39;: \u0026#39;\u0026#39;, 9 \u0026#39;ssid3\u0026#39;: \u0026#39;\u0026#39;, 10 \u0026#39;passwd1\u0026#39;: \u0026#39;webduino\u0026#39;, 11 \u0026#39;passwd2\u0026#39;: \u0026#39;\u0026#39;, 12 \u0026#39;passwd3\u0026#39;: \u0026#39;\u0026#39;, 13 \u0026#39;openAp\u0026#39;: \u0026#39;No\u0026#39;, 14 \u0026#39;MAC\u0026#39;: \u0026#39;??:??:??:??:??:??\u0026#39;, 15 \u0026#39;devId\u0026#39;: \u0026#39;a12345\u0026#39;, 16 \u0026#39;devSSID\u0026#39;: \u0026#39;wa5498\u0026#39;, 17 \u0026#39;devPasswd\u0026#39;: \u0026#39;12345678\u0026#39;, 18} Key 預設值 說明 zone global MQTT Server devId \u0026ndash; 開發板唯一識別碼 devSSID 開發板WiFi熱點名稱 devPasswd 開發板WiFi熱點密碼 openAp No 熱點是否持續打開 ssid1 第一組WiFi ssid passwd1 第一組WiFi 密碼 ssid2 第二組WiFi ssid passwd2 第二組WiFi 密碼 ssid3 第三組WiFi ssid passwd3 第三組WiFi 密碼 程式碼說明 # 1import machine 2from webduino.board import Board 3 4def cb(cmd): 5 print(\u0026#34;\u0026gt;\u0026gt; \u0026#34;+cmd) 6 7try: 8 board = Board(devId=\u0026#39;smart\u0026#39;) 9 board.onTopic(\u0026#34;test\u0026#34;,cb) 10 board.loop() 11except Exception as e: 12 print(e) 13 machine.reset() 上面程式碼是最簡單的建立開發板、連網、接收訊息的程式範例 如果自己寫的程式，也需要有一個無窮迴圈處理某件事 (例如持續偵測按鈕是否有按下、接收傳感器狀態等，就可以使用下列方式)\n將檢查Server訊息放在自訂迴圈內 # 接收mqtt訊息，需要執行 board.loop() 主動檢查是否有訊息，如果需要自行撰寫迴圈，可改用 board.check() 來進行接收mqtt訊息檢查 1# 將 board.loop() 改成下列程式碼 2 3while True: 4 board.check()\n初始化預設使用的類別庫 # 預設控制命令 # 為了方便控制、更新、協作物聯網裝置，Webduino micropython版本 開發板上線後，會預設訂閱MQTT通道，實現下列功能\n更新 main.py，執行指定的功能 下載安裝或更新指定的程式庫 回報板子狀況 (記憶體量、目前運行功能、mac address) 開發板上線流程 # 如果 cmd.py 存在就執行後重開 進行 wifi 、 mqtt 連線 訂閱 Topic: ${deviceId}/cmd 發送 Topic: waboard/state 開發板的 macAddress,功能說明 https://webduinoio.github.io/webduino-remote/index.html#-MugCxmGecBp_r9rMquA\nwaboard/state\n${CMD} ${macAddress} ${String} ${deviceId}/cmd 資料內容如下\n命令 參數1 參數2 ping 無 無 reset 無 無 reboot 無 無 save ${url} ${path/filename} "},{"id":10,"href":"/docs/ch2/oled/","title":"OLED","section":"二、使用傳感器","content":" OLED # SSD1306 128x64 # 1import ssd1306 2from machine import Pin,I2C 3from webduino.board import Board 4 5i2c = I2C(scl=Pin(0), sda=Pin(2), freq=100000) #Init i2c 6display = ssd1306.SSD1306_I2C(128,64,i2c) #create LCD object,Specify col and row 7display.fill(0) 8display.text(\u0026#34;Init...\u0026#34;,5,20) 9display.show() 10 11def cb(cmd): 12 print(\u0026#34;\u0026gt;\u0026gt; \u0026#34;+cmd) 13 data = cmd.split(\u0026#39; \u0026#39;) 14 display.fill(0) 15 display.text(\u0026#34;Temp:\u0026#34;,0,0) 16 display.text(data[0],20,12) 17 18 display.text(\u0026#34;Humi:\u0026#34;,0,28) 19 display.text(data[1],20,40) 20 display.show() 21 22try: 23 board = Board(devId=\u0026#39;sroom\u0026#39;) 24 board.onTopic(\u0026#34;data\u0026#34;,cb) 25 board.loop() 26except Exception as e: 27 print(e) 28 machine.reset() Wemos OLED # 1import ssd1306 2from machine import Pin,I2C 3from webduino.board import Board 4 5i2c = I2C(scl=Pin(5), sda=Pin(4), freq=100000) 6display = ssd1306.SSD1306_I2C(64,48,i2c) 7display.fill(0) 8display.text(\u0026#34;Init...\u0026#34;,5,20) 9display.show() 10 11def cb(cmd): 12 print(\u0026#34;\u0026gt;\u0026gt; \u0026#34;+cmd) 13 data = cmd.split(\u0026#39; \u0026#39;) 14 display.fill(0) 15 display.text(\u0026#34;Temp:\u0026#34;,0,0) 16 display.text(data[0],20,12) 17 18 display.text(\u0026#34;Humi:\u0026#34;,0,28) 19 display.text(data[1],20,40) 20 display.show() 21 22try: 23 board = Board(devId=\u0026#39;sroom\u0026#39;) 24 board.onTopic(\u0026#34;data\u0026#34;,cb) 25 board.loop() 26except Exception as e: 27 print(e) 28 machine.reset() 29``` "},{"id":11,"href":"/docs/ch2/max7219/","title":"點陣LED燈 8x8","section":"二、使用傳感器","content":" Max7219 # 1from machine import Signal, Pin 2import mled 3 4pixelart = { 5 \u0026#39;heart\u0026#39;: 0x00367F7F3E1C0800, 6 \u0026#39;pacman\u0026#39;: 0x3c4221111121423c, 7 \u0026#39;ghost\u0026#39;: 0x3C7E99DDFFFFFFDB 8} 9 10ani_heart_pulse = [ 11 (0, pixelart[\u0026#39;heart\u0026#39;]), 12 (1, None), 13 (2, None), 14 (3, None), 15 (4, None), 16 (5, None), 17 (6, None), 18 (7, None), 19 (6, None), 20 (5, None), 21 (4, None), 22 (3, None), 23 (2, None), 24 (1, None), 25 (0, None), 26 (0, 0x00) 27] 28 29ani_pacman_pulse = [ 30 (0, pixelart[\u0026#39;pacman\u0026#39;]), 31 (1, None), 32 (2, None), 33 (3, None), 34 (4, None), 35 (5, None), 36 (6, None), 37 (7, None), 38 (6, None), 39 (5, None), 40 (4, None), 41 (3, None), 42 (2, None), 43 (1, None), 44 (0, None), 45 (0, 0x00) 46] 47 48ani_ghost_pulse = [ 49 (0, pixelart[\u0026#39;ghost\u0026#39;]), 50 (1, None), 51 (2, None), 52 (3, None), 53 (4, None), 54 (5, None), 55 (6, None), 56 (7, None), 57 (6, None), 58 (5, None), 59 (4, None), 60 (3, None), 61 (2, None), 62 (1, None), 63 (0, None), 64 (0, 0x00) 65] 66 67class Example: 68 69 boards = { 70 \u0026#39;d1_mini\u0026#39;: (13, 14), 71 \u0026#39;mh_et_live_minikit\u0026#39;: (23, 18) 72 } 73 74 def main(self, model): 75 self.matrix = mled.driver(self.boards[model][0], self.boards[model][1]) 76 self.test() 77 self.animate() 78 79 def test(self): 80 self.matrix.clear() 81 self.matrix.setIntensity(7) 82 for y in range(0, 8): 83 for x in range(0, 8): 84 self.matrix.pixel(x, y, self.matrix.ON) 85 self.matrix.display() 86 87 for y in range(0, 8): 88 for x in range(0, 8): 89 self.matrix.pixel(x, y, self.matrix.OFF) 90 self.matrix.display() 91 92 def animate(self): 93 ani = mled.animation(self.matrix) 94 ani.loop(0, 64, ani_heart_pulse + ani_pacman_pulse + ani_ghost_pulse) 95 96 97app = Example() 98app.main(\u0026#39;d1_mini\u0026#39;) 99``` "},{"id":12,"href":"/docs/ch2/lcd1602/","title":"LCD1602","section":"二、使用傳感器","content":" LCD1602 # 1# https://github.com/dhylands/python_lcd/blob/master/lcd/lcd_api.py 2from time import sleep_ms, ticks_ms 3from machine import I2C, Pin 4from i2c_lcd import I2cLcd 5 6# The PCF8574 has a jumper selectable address: 0x20 - 0x27 7DEFAULT_I2C_ADDR = 0x3F 8 9def test_main(): 10 \u0026#34;\u0026#34;\u0026#34;Test function for verifying basic functionality.\u0026#34;\u0026#34;\u0026#34; 11 print(\u0026#34;Running test_main\u0026#34;) 12 i2c = I2C(scl=Pin(5), sda=Pin(4), freq=100000) 13 lcd = I2cLcd(i2c, DEFAULT_I2C_ADDR, 2, 16) 14 lcd.putstr(\u0026#34;It Works!\\nSecond Line\u0026#34;) 15 sleep_ms(3000) 16 lcd.clear() 17 count = 0 18 while True: 19 lcd.move_to(0, 0) 20 lcd.putstr(\u0026#34;%7d\u0026#34; % (ticks_ms() // 1000)) 21 sleep_ms(1000) 22 count += 1 23 if count % 10 == 3: 24 print(\u0026#34;Turning backlight off\u0026#34;) 25 lcd.backlight_off() 26 if count % 10 == 4: 27 print(\u0026#34;Turning backlight on\u0026#34;) 28 lcd.backlight_on() 29 if count % 10 == 5: 30 print(\u0026#34;Turning display off\u0026#34;) 31 lcd.display_off() 32 if count % 10 == 6: 33 print(\u0026#34;Turning display on\u0026#34;) 34 lcd.display_on() 35 if count % 10 == 7: 36 print(\u0026#34;Turning display \u0026amp; backlight off\u0026#34;) 37 lcd.backlight_off() 38 lcd.display_off() 39 if count % 10 == 8: 40 print(\u0026#34;Turning display \u0026amp; backlight on\u0026#34;) 41 lcd.backlight_on() 42 lcd.display_on() 43 44#if __name__ == \u0026#34;__main__\u0026#34;: 45test_main() "},{"id":13,"href":"/docs/ch2/7-segments/","title":"七段顯示器","section":"二、使用傳感器","content":" TM1637 七段顯示器 # 1from TM1637 import TM1637 2from machine import Pin 3tm = TM1637(clk=Pin(5), dio=Pin(4)) 4 5# all LEDS on \u0026#34;88:88\u0026#34; 6tm.write([127, 255, 127, 127]) 7tm.write(bytearray([127, 255, 127, 127])) 8tm.write(b\u0026#39;\\x7F\\xFF\\x7F\\x7F\u0026#39;) 9tm.show(\u0026#39;8888\u0026#39;, True) 10tm.numbers(88, 88, True) 11 12# all LEDS off 13tm.write([0, 0, 0, 0]) 14tm.show(\u0026#39; \u0026#39;) 15 16# write to the 2nd and 3rd segments only 17tm.write([119, 124], 1) # _Ab_ 18tm.write([124], 2) # __b_ 19tm.write([119], 1) # _A__ 20 21# display \u0026#34;0123\u0026#34; 22tm.write([63, 6, 91, 79]) 23tm.write(bytearray([63, 6, 91, 79])) 24tm.write(b\u0026#39;\\x3F\\x06\\x5B\\x4F\u0026#39;) 25tm.show(\u0026#39;1234\u0026#39;) 26tm.number(1234) 27tm.numbers(12, 34, False) 28 29# display \u0026#34;4567\u0026#34; 30tm.write([102, 109, 125, 7]) 31tm.write([102], 0) # 4___ 32tm.write([109], 1) # _5__ 33tm.write([125], 2) # __6_ 34tm.write([7], 3) # ___7 35 36# set middle two segments to \u0026#34;12\u0026#34;, ie \u0026#34;4127\u0026#34; 37tm.write([6, 91], 1) # _12_ 38 39# set last segment to \u0026#34;9\u0026#34;, ie \u0026#34;4129\u0026#34; 40tm.write([111], 3) # ___9 41 42# walk through all possible LED combinations 43from time import sleep_ms 44for i in range(128): 45 tm.number(i) 46 tm.write([i]) 47 sleep_ms(100) 48 49# show \u0026#34;AbCd\u0026#34; 50tm.write([119, 124, 57, 94]) 51tm.show(\u0026#39;abcd\u0026#39;) 52 53# show \u0026#34;COOL\u0026#34; 54tm.write([0b00111001, 0b00111111, 0b00111111, 0b00111000]) 55tm.write([0x39, 0x3F, 0x3F, 0x38]) 56tm.write(b\u0026#39;\\x39\\x3F\\x3F\\x38\u0026#39;) 57tm.write([57, 63, 63, 56]) 58tm.show(\u0026#39;cool\u0026#39;) 59tm.show(\u0026#39;COOL\u0026#39;) 60 61# display \u0026#34;dEAd\u0026#34;, \u0026#34;bEEF\u0026#34; 62tm.hex(0xdead) 63tm.hex(0xbeef) 64tm.show(\u0026#39;dead\u0026#39;) 65tm.show(\u0026#39;Beef\u0026#39;) 66 67# show \u0026#34;12:59\u0026#34; 68tm.numbers(12, 59) 69tm.show(\u0026#39;1259\u0026#39;, True) 70 71# show \u0026#34;-123\u0026#34; 72tm.number(-123) 73tm.show(\u0026#39;-123\u0026#39;) 74 75# Show Help 76tm.show(\u0026#39;Help\u0026#39;) 77tm.write(tm.encode_string(\u0026#39;Help\u0026#39;)) 78tm.write([tm.encode_char(\u0026#39;H\u0026#39;), tm.encode_char(\u0026#39;e\u0026#39;), tm.encode_char(\u0026#39;l\u0026#39;), tm.encode_char(\u0026#39;p\u0026#39;)]) 79 80# Scroll Hello World from right to left 81tm.scroll(\u0026#39;Hello World\u0026#39;) # 4 fps 82tm.scroll(\u0026#39;Hello World\u0026#39;, 1000) # 1 fps 83 84# Scroll all available characters 85tm.scroll(list(tm1637._SEGMENTS)) 86 87# all LEDs dim 88tm.brightness(0) 89 90# all LEDs bright 91tm.brightness(7) 92 93# converts a digit 0-0x0f to a byte representing a single segment 94# use write() to render the byte on a single segment 95tm.encode_digit(0) 96# 63 97 98tm.encode_digit(8) 99# 127 100 101tm.encode_digit(0x0f) 102# 113 103 104# 15 or 0x0f generates a segment that can output a F character 105tm.encode_digit(15) 106# 113 107 108tm.encode_digit(0x0f) 109# 113 110 111# used to convert a 1-4 length string to an array of segments 112tm.encode_string(\u0026#39; 1\u0026#39;) 113# bytearray(b\u0026#39;\\x00\\x00\\x00\\x06\u0026#39;) 114 115tm.encode_string(\u0026#39;2 \u0026#39;) 116# bytearray(b\u0026#39;[\\x00\\x00\\x00\u0026#39;) 117 118tm.encode_string(\u0026#39;1234\u0026#39;) 119# bytearray(b\u0026#39;\\x06[Of\u0026#39;) 120 121tm.encode_string(\u0026#39;-12-\u0026#39;) 122# bytearray(b\u0026#39;@\\x06[@\u0026#39;) 123 124tm.encode_string(\u0026#39;cafe\u0026#39;) 125# bytearray(b\u0026#39;9wqy\u0026#39;) 126 127tm.encode_string(\u0026#39;CAFE\u0026#39;) 128# bytearray(b\u0026#39;9wqy\u0026#39;) 129 130tm.encode_string(\u0026#39;a\u0026#39;) 131# bytearray(b\u0026#39;w\\x00\\x00\\x00\u0026#39;) 132 133tm.encode_string(\u0026#39;ab\u0026#39;) 134# bytearray(b\u0026#39;w|\\x00\\x00\u0026#39;) 135 136# used to convert a single character to a segment byte 137tm.encode_char(\u0026#39;1\u0026#39;) 138# 6 139 140tm.encode_char(\u0026#39;9\u0026#39;) 141# 111 142 143tm.encode_char(\u0026#39;-\u0026#39;) 144# 64 145 146tm.encode_char(\u0026#39;a\u0026#39;) 147# 119 148 149tm.encode_char(\u0026#39;F\u0026#39;) 150# 113 151 152# display \u0026#34;dEAd\u0026#34;, \u0026#34;bEEF\u0026#34;, \u0026#34;CAFE\u0026#34; and \u0026#34;bAbE\u0026#34; 153tm.hex(0xdead) 154tm.hex(0xbeef) 155tm.hex(0xcafe) 156tm.hex(0xbabe) 157 158# show \u0026#34;00FF\u0026#34; (hex right aligned) 159tm.hex(0xff) 160 161# show \u0026#34; 1\u0026#34; (numbers right aligned) 162tm.number(1) 163 164# show \u0026#34; 12\u0026#34; 165tm.number(12) 166 167# show \u0026#34; 123\u0026#34; 168tm.number(123) 169 170# show \u0026#34;9999\u0026#34; capped at 9999 171tm.number(20000) 172 173# show \u0026#34; -1\u0026#34; 174tm.number(-1) 175 176# show \u0026#34; -12\u0026#34; 177tm.number(-12) 178 179# show \u0026#34;-123\u0026#34; 180tm.number(-123) 181 182# show \u0026#34;-999\u0026#34; capped at -999 183tm.number(-1234) 184 185# show \u0026#34;01:02\u0026#34; 186tm.numbers(1, 2) 187 188# show \u0026#34;0102\u0026#34; 189tm.numbers(1, 2, False) 190 191# show \u0026#34;-5:11\u0026#34; 192tm.numbers(-5, 11) 193 194# show \u0026#34;12:59\u0026#34; 195tm.numbers(12, 59) 196 197# show temperature \u0026#39;24*C\u0026#39; 198tm.temperature(24) 199tm.show(\u0026#39;24*C\u0026#39;) 200 201# show temperature works for range -9 to +99 202tm.temperature(-10) # LO*C 203tm.temperature(-9) # -9*C 204tm.temperature(5) # 5*C 205tm.temperature(99) # 99*C 206tm.temperature(100) # HI*C "}]